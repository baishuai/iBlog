<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Befovy 的博客 | Befovy blog</title>
    <link>https://blog.befovy.com/posts/</link>
    <description>Recent content in Posts on Befovy 的博客 | Befovy blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 23 Nov 2019 16:46:38 +0800</lastBuildDate>
    
	<atom:link href="https://blog.befovy.com/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>手把手带你写 Flutter 系统音量插件</title>
      <link>https://blog.befovy.com/2019/11/%E6%89%8B%E6%8A%8A%E6%89%8B%E5%B8%A6%E4%BD%A0%E5%86%99-flutter-%E7%B3%BB%E7%BB%9F%E9%9F%B3%E9%87%8F%E6%8F%92%E4%BB%B6/</link>
      <pubDate>Sat, 23 Nov 2019 16:46:38 +0800</pubDate>
      
      <guid>https://blog.befovy.com/2019/11/%E6%89%8B%E6%8A%8A%E6%89%8B%E5%B8%A6%E4%BD%A0%E5%86%99-flutter-%E7%B3%BB%E7%BB%9F%E9%9F%B3%E9%87%8F%E6%8F%92%E4%BB%B6/</guid>
      <description>手把手带你写 Flutter 系统音量插件  认真读完本文就能掌握编写一个 Flutter 系统音量插件的技能，支持调节系统音量以及监听系统音量变化。 如有不当之处敬请指正。
 
0、背景 我最近在做一个 Flutter 视频播放器插件 fijkplayer，感兴趣可以看我的 github。在 0.1.0 版本之后考虑增加调节系统音量功能。google 一番，找到了相关的 Flutter 插件（Flutter 的生态真的是建立挺快的）。但仔细了解插件的功能之后，感觉有些不满足我的需求，同时由于我的 fijkplayer 本身就是一个插件，想尽量避免依赖额外的插件，所以我干嘛不自己动手造一个？这可比播放器插件简单多了。
本文写作时播放器插件 fijkplayer 上已经完成了音量调节和监控的功能，为了文档内容清晰，把相关的代码又单独抽出来作为一个小项目 flutter_volume 。

1、环境介绍 搭建 Flutter 环境这里不专门讲了。直接从 Flutter 插件的开发环境入手。
本文使用的 Flutter 版本和环境是 [✓] Flutter is fully installed. (Channel stable, v1.9.1+hotfix.2, on Mac OS X 10.14.6 18G95, locale zh-Hans-CN) 
创建插件 新建一个叫做 flutter_volume 的 Flutter 插件：flutter create --org com.befovy -t plugin -i objc flutter_volume 。</description>
    </item>
    
    <item>
      <title>用 CMake 为 ijkplayer 增加 android native debug 支持</title>
      <link>https://blog.befovy.com/2019/06/%E7%94%A8-cmake-%E4%B8%BA-ijkplayer-%E5%A2%9E%E5%8A%A0-android-native-debug-%E6%94%AF%E6%8C%81/</link>
      <pubDate>Sun, 30 Jun 2019 15:26:52 +0000</pubDate>
      
      <guid>https://blog.befovy.com/2019/06/%E7%94%A8-cmake-%E4%B8%BA-ijkplayer-%E5%A2%9E%E5%8A%A0-android-native-debug-%E6%94%AF%E6%8C%81/</guid>
      <description>给 ijkplayer 增加了 cmake 构建方式，支持在 android studio 中进行 c 代码断点调试。
直接上手请前往 https://github.com/befovy/ijkplayer#build-android-via-cmake
如果想了解一下整个过程请继续阅读本文。
 ijkplayer 简介 ijkplayer 是由 B 站开源的一款移动端播放器。基于 ffmpeg 中 ffplay 开发，并添加 android MediaCodec、iOS VideotTolbox 视频硬解码支持以及 opengles、NativeWindow(android) 渲染，在当前的移动直播热潮中，被大量使用。 但使用 ijkplayer 进行 android 播放器开发的过程中，调试起来稍微有些麻烦，官方提供了ndk 调试的几个patch 文件，并且有一段描述，是基于 ndk-build android.mk 工具链构建的。说实话由于没有做成开箱即用，我也没认真看过这部分内容。 由于我对 cmake 的了解更多一些，加之 google 官方也逐渐将 ndk 的工具链由 ndk-build 转向 cmake，并在 android studio 中对 cmake 提供了更好的支持。同时 cmake 也是跨平台的构建工具，方便后续将 ijkplayer 扩展至其它平台，所以我用 cmake 重新实现了 ijkplayer 的构建过程。
只要不是修改 ffmpeg 的源代码，其它内容包括 ijkplayer 的 c 代码修改， java 层修改，都可以在 android studio 中一键运行、调试。</description>
    </item>
    
    <item>
      <title>使用 mirror 和 hugo 实现 github issue 的博客自动同步</title>
      <link>https://blog.befovy.com/2019/06/%E4%BD%BF%E7%94%A8-mirror-%E5%92%8C-hugo-%E5%AE%9E%E7%8E%B0-github-issue-%E7%9A%84%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5/</link>
      <pubDate>Sun, 30 Jun 2019 13:53:30 +0000</pubDate>
      
      <guid>https://blog.befovy.com/2019/06/%E4%BD%BF%E7%94%A8-mirror-%E5%92%8C-hugo-%E5%AE%9E%E7%8E%B0-github-issue-%E7%9A%84%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E5%90%8C%E6%AD%A5/</guid>
      <description>一直觉得 Issue 是个特别好用的记录工具，看到很多人也直接把 Issue 作为个人博客。 Issue 可以碎片化的记录一些东西，然后在进行整理，最终形成一篇不错的博客内容。
Issue 适合记录博客，但我觉得直接以 Issue 的形式将内容展示给读者还是缺少了博客本来的样子。毕竟Issue不支持自定义主题。
我青睐的形式是：通过 Issue 进行写作，然后自动发布到博客站点。 所以就产生了 mirror 这个工具。
mirror 能够自动抓取 github 项目里的 issue，并输出为 hugo 支持的构建格式。 通过 hugo 自动生成静态网页，最终通过自动工具实现部署。
使用 github webhooks 以及很少的自动化脚本就可以实现这个过程的全自动化。
 mirror mirror 通过 github 提供的 graphql 进行 Issues 内容抓取。
通过一些自定义规则，实现 Issues 内容的分类提取，并整理输出博客内容。
mirror 规则
mirror 配置文件 mirror 的配置文件使用 yaml 格式， 参考 conf.yaml
默认查找运行目录下的mirror.yaml 作为输入配置文件
配置文件中可定义多个内容来源。 每一种不同的内容来源，都有其具体的配置项。
内容来源 &amp;ldquo;issues&amp;rdquo; 具体的配置内容有
 token: github token, 需要有 issue 读取权限 login: github username repo: 要抓取的 issue 所在的 repo 名称 prefix: 输出文件名的统一前缀 output: 转换成 hugo 博客内容后的本地输出目录，建议指定为 hugo 博客的 content 目录  内容来源 Issue 的抓取规则</description>
    </item>
    
  </channel>
</rss>